
AVRASM ver. 2.1.30  B:\5thSemester\Microprocessor and assembly language\project\project\Debug\List\project.asm Wed May 22 20:00:10 2019

B:\5thSemester\Microprocessor and assembly language\project\project\Debug\List\project.asm(1086): warning: Register r4 already defined by the .DEF directive
B:\5thSemester\Microprocessor and assembly language\project\project\Debug\List\project.asm(1087): warning: Register r5 already defined by the .DEF directive
B:\5thSemester\Microprocessor and assembly language\project\project\Debug\List\project.asm(1088): warning: Register r7 already defined by the .DEF directive
B:\5thSemester\Microprocessor and assembly language\project\project\Debug\List\project.asm(1089): warning: Register r6 already defined by the .DEF directive
B:\5thSemester\Microprocessor and assembly language\project\project\Debug\List\project.asm(1090): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R4
                 	.DEF _counter_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c042      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c065      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G102:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001c 0000      	.DB  0x0,0x0
                 
                 _0x0:
00001d 6c41
00001e 2069
00001f 6151
000020 6573      	.DB  0x41,0x6C,0x69,0x20,0x51,0x61,0x73,0x65
000021 696d
000022 6400
000023 7369
000024 6174      	.DB  0x6D,0x69,0x0,0x64,0x69,0x73,0x74,0x61
000025 636e
000026 3d65
000027 6300
000028 006d      	.DB  0x6E,0x63,0x65,0x3D,0x0,0x63,0x6D,0x0
                 _0x2000003:
000029 c080      	.DB  0x80,0xC0
                 _0x2020060:
B:\5thSemester\Microprocessor and assembly language\project\project\Debug\List\project.asm(1136): warning: .cseg .db misalignment - padding zero byte
00002a 0001      	.DB  0x1
                 _0x2020000:
00002b 4e2d
00002c 4e41
00002d 4900
00002e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
B:\5thSemester\Microprocessor and assembly language\project\project\Debug\List\project.asm(1139): warning: .cseg .db misalignment - padding zero byte
00002f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000030 0002      	.DW  0x02
000031 0004      	.DW  0x04
000032 0038      	.DW  __REG_VARS*2
                 
000033 000b      	.DW  0x0B
000034 0160      	.DW  _0x3
000035 003a      	.DW  _0x0*2
                 
000036 000a      	.DW  0x0A
000037 016b      	.DW  _0x3+11
000038 0045      	.DW  _0x0*2+11
                 
000039 0003      	.DW  0x03
00003a 0175      	.DW  _0x3+21
00003b 004f      	.DW  _0x0*2+21
                 
00003c 0002      	.DW  0x02
00003d 0186      	.DW  __base_y_G100
00003e 0052      	.DW  _0x2000003*2
                 
00003f 0001      	.DW  0x01
000040 018a      	.DW  __seed_G101
000041 0054      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000042 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000043 94f8      	CLI
000044 27ee      	CLR  R30
000045 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000046 e0f1      	LDI  R31,1
000047 bffb      	OUT  GICR,R31
000048 bfeb      	OUT  GICR,R30
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000068 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000069 bfed      	OUT  SPL,R30
00006a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006e c010      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;
                 ;
                 ;unsigned int counter = 0 ;
                 ;float distance  = 0;
                 ;unsigned char str[10] ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 000C interrupt [10] void timer0_ovf_isr(void) {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00006f 93ea      	ST   -Y,R30
000070 93fa      	ST   -Y,R31
000071 b7ef      	IN   R30,SREG
000072 93ea      	ST   -Y,R30
                 ; 0000 000D TCNT0 = 0 ;
000073 e0e0      	LDI  R30,LOW(0)
000074 bfe2      	OUT  0x32,R30
                 ; 0000 000E counter++ ;
000075 01f2      	MOVW R30,R4
000076 9631      	ADIW R30,1
000077 012f      	MOVW R4,R30
                 ; 0000 000F TIFR=0x01;
000078 e0e1      	LDI  R30,LOW(1)
000079 bfe8      	OUT  0x38,R30
                 ; 0000 0010 }
00007a 91e9      	LD   R30,Y+
00007b bfef      	OUT  SREG,R30
00007c 91f9      	LD   R31,Y+
00007d 91e9      	LD   R30,Y+
00007e 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0012 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0013 DDRB = 0xff;
00007f efef      	LDI  R30,LOW(255)
000080 bbe7      	OUT  0x17,R30
                 ; 0000 0014 DDRC = 0x05;
000081 e0e5      	LDI  R30,LOW(5)
000082 bbe4      	OUT  0x14,R30
                 ; 0000 0015 
                 ; 0000 0016 
                 ; 0000 0017 
                 ; 0000 0018 lcd_init(16);
000083 e1a0      	LDI  R26,LOW(16)
000084 d0c8      	RCALL _lcd_init
                 ; 0000 0019 
                 ; 0000 001A  lcd_clear() ;
000085 d098      	RCALL _lcd_clear
                 ; 0000 001B  lcd_puts("Ali Qasemi");
                +
000086 e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
000087 e0b1     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
000088 d0b3      	RCALL _lcd_puts
                 ; 0000 001C  delay_ms(2000);
000089 eda0      	LDI  R26,LOW(2000)
00008a e0b7      	LDI  R27,HIGH(2000)
00008b d219      	RCALL _delay_ms
                 ; 0000 001D  lcd_clear();
00008c d091      	RCALL _lcd_clear
                 ; 0000 001E 
                 ; 0000 001F   TCNT0=0X00;
00008d e0e0      	LDI  R30,LOW(0)
00008e bfe2      	OUT  0x32,R30
                 ; 0000 0020   TIMSK=0x01;
00008f e0e1      	LDI  R30,LOW(1)
000090 bfe9      	OUT  0x39,R30
                 ; 0000 0021   #asm("sei")
000091 9478      	sei
                 ; 0000 0022 
                 ; 0000 0023 
                 ; 0000 0024 while (1)
                 _0x4:
                 ; 0000 0025       {
                 ; 0000 0026       PORTC.0 = 1 ;
000092 9aa8      	SBI  0x15,0
                 ; 0000 0027       delay_us(10) ;
                +
000093 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000094 958a     +DEC R24
000095 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0028       PORTC.0 = 0 ;
000096 98a8      	CBI  0x15,0
                 ; 0000 0029 
                 ; 0000 002A       while(PINC.1 == 0);
                 _0xB:
000097 9b99      	SBIS 0x13,1
000098 cffe      	RJMP _0xB
                 ; 0000 002B       {
                 ; 0000 002C       TCCR0 = 0x01 ;    //frequency 1
000099 e0e1      	LDI  R30,LOW(1)
00009a bfe3      	OUT  0x33,R30
                 ; 0000 002D       counter = 0 ;
00009b 2444      	CLR  R4
00009c 2455      	CLR  R5
                 ; 0000 002E       TCNT0 = 0 ;
00009d e0e0      	LDI  R30,LOW(0)
00009e bfe2      	OUT  0x32,R30
                 ; 0000 002F       }
                 ; 0000 0030       while(PINC.1 == 1);
                 _0xE:
00009f 9999      	SBIC 0x13,1
0000a0 cffe      	RJMP _0xE
                 ; 0000 0031       {
                 ; 0000 0032       TCCR0 = 0x00 ; // stop timer
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bfe3      	OUT  0x33,R30
                 ; 0000 0033       }
                 ; 0000 0034 
                 ; 0000 0035       distance = 0 ;
0000a3 93e0 0178 	STS  _distance,R30
0000a5 93e0 0179 	STS  _distance+1,R30
0000a7 93e0 017a 	STS  _distance+2,R30
0000a9 93e0 017b 	STS  _distance+3,R30
                 ; 0000 0036       distance = (counter * 256 + TCNT0) * 0.01724 ; // evaluate for distance
0000ab 2db4      	MOV  R27,R4
0000ac e0a0      	LDI  R26,LOW(0)
0000ad b7e2      	IN   R30,0x32
0000ae e0f0      	LDI  R31,0
0000af 0fea      	ADD  R30,R26
0000b0 1ffb      	ADC  R31,R27
0000b1 2766      	CLR  R22
0000b2 2777      	CLR  R23
0000b3 d267      	RCALL __CDF1
                +
0000b4 eea7     +LDI R26 , LOW ( 0x3C8D3AE7 )
0000b5 e3ba     +LDI R27 , HIGH ( 0x3C8D3AE7 )
0000b6 e88d     +LDI R24 , BYTE3 ( 0x3C8D3AE7 )
0000b7 e39c     +LDI R25 , BYTE4 ( 0x3C8D3AE7 )
                 	__GETD2N 0x3C8D3AE7
0000b8 d2ec      	RCALL __MULF12
0000b9 93e0 0178 	STS  _distance,R30
0000bb 93f0 0179 	STS  _distance+1,R31
0000bd 9360 017a 	STS  _distance+2,R22
0000bf 9370 017b 	STS  _distance+3,R23
                 ; 0000 0037       if(distance < 15){
0000c1 91a0 0178 	LDS  R26,_distance
0000c3 91b0 0179 	LDS  R27,_distance+1
0000c5 9180 017a 	LDS  R24,_distance+2
0000c7 9190 017b 	LDS  R25,_distance+3
                +
0000c9 e0e0     +LDI R30 , LOW ( 0x41700000 )
0000ca e0f0     +LDI R31 , HIGH ( 0x41700000 )
0000cb e760     +LDI R22 , BYTE3 ( 0x41700000 )
0000cc e471     +LDI R23 , BYTE4 ( 0x41700000 )
                 	__GETD1N 0x41700000
0000cd d36a      	RCALL __CMPF12
0000ce f410      	BRSH _0x11
                 ; 0000 0038       PORTC.2 = 1 ;
0000cf 9aaa      	SBI  0x15,2
                 ; 0000 0039       }
                 ; 0000 003A       else{
0000d0 c001      	RJMP _0x14
                 _0x11:
                 ; 0000 003B       PORTC.2 = 0 ;
0000d1 98aa      	CBI  0x15,2
                 ; 0000 003C       }
                 _0x14:
                 ; 0000 003D 
                 ; 0000 003E       //show on lcd
                 ; 0000 003F       lcd_clear() ;
0000d2 d04b      	RCALL _lcd_clear
                 ; 0000 0040       lcd_puts("distance=");
                +
0000d3 e6ab     +LDI R26 , LOW ( _0x3 + ( 11 ) )
0000d4 e0b1     +LDI R27 , HIGH ( _0x3 + ( 11 ) )
                 	__POINTW2MN _0x3,11
0000d5 d066      	RCALL _lcd_puts
                 ; 0000 0041       lcd_gotoxy(0,1);
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 93ea      	ST   -Y,R30
0000d8 e0a1      	LDI  R26,LOW(1)
0000d9 d037      	RCALL _lcd_gotoxy
                 ; 0000 0042       ftoa(distance,2,str);
0000da 91e0 0178 	LDS  R30,_distance
0000dc 91f0 0179 	LDS  R31,_distance+1
0000de 9160 017a 	LDS  R22,_distance+2
0000e0 9170 017b 	LDS  R23,_distance+3
0000e2 d391      	RCALL __PUTPARD1
0000e3 e0e2      	LDI  R30,LOW(2)
0000e4 93ea      	ST   -Y,R30
0000e5 e7ac      	LDI  R26,LOW(_str)
0000e6 e0b1      	LDI  R27,HIGH(_str)
0000e7 d08e      	RCALL _ftoa
                 ; 0000 0043       lcd_puts(str);
0000e8 e7ac      	LDI  R26,LOW(_str)
0000e9 e0b1      	LDI  R27,HIGH(_str)
0000ea d051      	RCALL _lcd_puts
                 ; 0000 0044       lcd_gotoxy(5 , 1) ;
0000eb e0e5      	LDI  R30,LOW(5)
0000ec 93ea      	ST   -Y,R30
0000ed e0a1      	LDI  R26,LOW(1)
0000ee d022      	RCALL _lcd_gotoxy
                 ; 0000 0045       lcd_puts("cm") ;
                +
0000ef e7a5     +LDI R26 , LOW ( _0x3 + ( 21 ) )
0000f0 e0b1     +LDI R27 , HIGH ( _0x3 + ( 21 ) )
                 	__POINTW2MN _0x3,21
0000f1 d04a      	RCALL _lcd_puts
                 ; 0000 0046       delay_ms(500) ;
0000f2 efa4      	LDI  R26,LOW(500)
0000f3 e0b1      	LDI  R27,HIGH(500)
0000f4 d1b0      	RCALL _delay_ms
                 ; 0000 0047 
                 ; 0000 0048       }
0000f5 cf9c      	RJMP _0x4
                 ; 0000 0049 }
                 _0x17:
0000f6 cfff      	RJMP _0x17
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0x18
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000f7 93aa      	ST   -Y,R26
0000f8 b3e8      	IN   R30,0x18
0000f9 70ef      	ANDI R30,LOW(0xF)
0000fa 2fae      	MOV  R26,R30
0000fb 81e8      	LD   R30,Y
0000fc 7fe0      	ANDI R30,LOW(0xF0)
0000fd 2bea      	OR   R30,R26
0000fe bbe8      	OUT  0x18,R30
0000ff d155      	RCALL SUBOPT_0x0
000100 9ac2      	SBI  0x18,2
000101 d153      	RCALL SUBOPT_0x0
000102 98c2      	CBI  0x18,2
000103 d151      	RCALL SUBOPT_0x0
000104 c06f      	RJMP _0x20C0004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000105 93aa      	ST   -Y,R26
000106 81a8      	LD   R26,Y
000107 dfef      	RCALL __lcd_write_nibble_G100
000108 81e8          ld    r30,y
000109 95e2          swap  r30
00010a 83e8          st    y,r30
00010b 81a8      	LD   R26,Y
00010c dfea      	RCALL __lcd_write_nibble_G100
                +
00010d e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00010e 958a     +DEC R24
00010f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000110 c063      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000111 93aa      	ST   -Y,R26
000112 81e8      	LD   R30,Y
000113 e0f0      	LDI  R31,0
000114 57ea      	SUBI R30,LOW(-__base_y_G100)
000115 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000116 81e0      	LD   R30,Z
000117 81a9      	LDD  R26,Y+1
000118 0fae      	ADD  R26,R30
000119 dfeb      	RCALL __lcd_write_data
00011a 8079      	LDD  R7,Y+1
00011b 8068      	LDD  R6,Y+0
00011c 9622      	ADIW R28,2
00011d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00011e e0a2      	LDI  R26,LOW(2)
00011f d139      	RCALL SUBOPT_0x1
000120 e0ac      	LDI  R26,LOW(12)
000121 dfe3      	RCALL __lcd_write_data
000122 e0a1      	LDI  R26,LOW(1)
000123 d135      	RCALL SUBOPT_0x1
000124 e0e0      	LDI  R30,LOW(0)
000125 2e6e      	MOV  R6,R30
000126 2e7e      	MOV  R7,R30
000127 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000128 93aa      	ST   -Y,R26
000129 81a8      	LD   R26,Y
00012a 30aa      	CPI  R26,LOW(0xA)
00012b f011      	BREQ _0x2000005
00012c 1479      	CP   R7,R9
00012d f040      	BRLO _0x2000004
                 _0x2000005:
00012e e0e0      	LDI  R30,LOW(0)
00012f 93ea      	ST   -Y,R30
000130 9463      	INC  R6
000131 2da6      	MOV  R26,R6
000132 dfde      	RCALL _lcd_gotoxy
000133 81a8      	LD   R26,Y
000134 30aa      	CPI  R26,LOW(0xA)
000135 f1f1      	BREQ _0x20C0004
                 _0x2000004:
000136 9473      	INC  R7
000137 9ac0      	SBI  0x18,0
000138 81a8      	LD   R26,Y
000139 dfcb      	RCALL __lcd_write_data
00013a 98c0      	CBI  0x18,0
00013b c038      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00013c 93ba      	ST   -Y,R27
00013d 93aa      	ST   -Y,R26
00013e 931a      	ST   -Y,R17
                 _0x2000008:
00013f 81a9      	LDD  R26,Y+1
000140 81ba      	LDD  R27,Y+1+1
000141 91ed      	LD   R30,X+
000142 83a9      	STD  Y+1,R26
000143 83ba      	STD  Y+1+1,R27
000144 2f1e      	MOV  R17,R30
000145 30e0      	CPI  R30,0
000146 f019      	BREQ _0x200000A
000147 2fa1      	MOV  R26,R17
000148 dfdf      	RCALL _lcd_putchar
000149 cff5      	RJMP _0x2000008
                 _0x200000A:
00014a 8118      	LDD  R17,Y+0
00014b 9623      	ADIW R28,3
00014c 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00014d 93aa      	ST   -Y,R26
00014e b3e7      	IN   R30,0x17
00014f 6fe0      	ORI  R30,LOW(0xF0)
000150 bbe7      	OUT  0x17,R30
000151 9aba      	SBI  0x17,2
000152 9ab8      	SBI  0x17,0
000153 9ab9      	SBI  0x17,1
000154 98c2      	CBI  0x18,2
000155 98c0      	CBI  0x18,0
000156 98c1      	CBI  0x18,1
000157 8098      	LDD  R9,Y+0
000158 81e8      	LD   R30,Y
000159 58e0      	SUBI R30,-LOW(128)
                +
00015a 93e0 0188+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015c 81e8      	LD   R30,Y
00015d 54e0      	SUBI R30,-LOW(192)
                +
00015e 93e0 0189+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000160 e1a4      	LDI  R26,LOW(20)
000161 e0b0      	LDI  R27,0
000162 d142      	RCALL _delay_ms
000163 d0f9      	RCALL SUBOPT_0x2
000164 d0f8      	RCALL SUBOPT_0x2
000165 d0f7      	RCALL SUBOPT_0x2
000166 e2a0      	LDI  R26,LOW(32)
000167 df8f      	RCALL __lcd_write_nibble_G100
                +
000168 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000169 958a     +DEC R24
00016a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00016b e2a8      	LDI  R26,LOW(40)
00016c df98      	RCALL __lcd_write_data
00016d e0a4      	LDI  R26,LOW(4)
00016e df96      	RCALL __lcd_write_data
00016f e8a5      	LDI  R26,LOW(133)
000170 df94      	RCALL __lcd_write_data
000171 e0a6      	LDI  R26,LOW(6)
000172 df92      	RCALL __lcd_write_data
000173 dfaa      	RCALL _lcd_clear
                 _0x20C0004:
000174 9621      	ADIW R28,1
000175 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
000176 93ba      	ST   -Y,R27
000177 93aa      	ST   -Y,R26
000178 9724      	SBIW R28,4
000179 e0e0      	LDI  R30,LOW(0)
00017a 83e8      	ST   Y,R30
00017b 83e9      	STD  Y+1,R30
00017c 83ea      	STD  Y+2,R30
00017d e3ef      	LDI  R30,LOW(63)
00017e 83eb      	STD  Y+3,R30
00017f d30b      	RCALL __SAVELOCR2
000180 85eb      	LDD  R30,Y+11
000181 85fc      	LDD  R31,Y+11+1
000182 3fef      	CPI  R30,LOW(0xFFFF)
000183 efaf      	LDI  R26,HIGH(0xFFFF)
000184 07fa      	CPC  R31,R26
000185 f429      	BRNE _0x202000D
000186 d0dc      	RCALL SUBOPT_0x3
                +
000187 e5a6     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
000188 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
000189 d0be      	RCALL _strcpyf
00018a c07a      	RJMP _0x20C0003
                 _0x202000D:
00018b 3fef      	CPI  R30,LOW(0x7FFF)
00018c e7af      	LDI  R26,HIGH(0x7FFF)
00018d 07fa      	CPC  R31,R26
00018e f429      	BRNE _0x202000C
00018f d0d3      	RCALL SUBOPT_0x3
                +
000190 e5a7     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
000191 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
000192 d0b5      	RCALL _strcpyf
000193 c071      	RJMP _0x20C0003
                 _0x202000C:
000194 85ac      	LDD  R26,Y+12
000195 23aa      	TST  R26
000196 f432      	BRPL _0x202000F
000197 d0d0      	RCALL SUBOPT_0x4
000198 d116      	RCALL __ANEGF1
000199 d0d3      	RCALL SUBOPT_0x5
00019a d0d7      	RCALL SUBOPT_0x6
00019b e2ed      	LDI  R30,LOW(45)
00019c 93ec      	ST   X,R30
                 _0x202000F:
00019d 85a8      	LDD  R26,Y+8
00019e 30a7      	CPI  R26,LOW(0x7)
00019f f010      	BRLO _0x2020010
0001a0 e0e6      	LDI  R30,LOW(6)
0001a1 87e8      	STD  Y+8,R30
                 _0x2020010:
0001a2 8518      	LDD  R17,Y+8
                 _0x2020011:
0001a3 2fe1      	MOV  R30,R17
0001a4 5011      	SUBI R17,1
0001a5 30e0      	CPI  R30,0
0001a6 f021      	BREQ _0x2020013
0001a7 d0d1      	RCALL SUBOPT_0x7
0001a8 d0d5      	RCALL SUBOPT_0x8
0001a9 d0da      	RCALL SUBOPT_0x9
0001aa cff8      	RJMP _0x2020011
                 _0x2020013:
0001ab d0dd      	RCALL SUBOPT_0xA
0001ac d1a8      	RCALL __ADDF12
0001ad d0bf      	RCALL SUBOPT_0x5
0001ae e010      	LDI  R17,LOW(0)
                +
0001af e0e0     +LDI R30 , LOW ( 0x3F800000 )
0001b0 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0001b1 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0001b2 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0001b3 d0d0      	RCALL SUBOPT_0x9
                 _0x2020014:
0001b4 d0d4      	RCALL SUBOPT_0xA
0001b5 d282      	RCALL __CMPF12
0001b6 f060      	BRLO _0x2020016
0001b7 d0c1      	RCALL SUBOPT_0x7
0001b8 d0d9      	RCALL SUBOPT_0xB
0001b9 d0ca      	RCALL SUBOPT_0x9
0001ba 5f1f      	SUBI R17,-LOW(1)
0001bb 3217      	CPI  R17,39
0001bc f028      	BRLO _0x2020017
0001bd d0a5      	RCALL SUBOPT_0x3
                +
0001be e5ab     +LDI R26 , LOW ( 2 * _0x2020000 + ( 5 ) )
0001bf e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 5 ) )
                 	__POINTW2FN _0x2020000,5
0001c0 d087      	RCALL _strcpyf
0001c1 c043      	RJMP _0x20C0003
                 _0x2020017:
0001c2 cff1      	RJMP _0x2020014
                 _0x2020016:
0001c3 3010      	CPI  R17,0
0001c4 f421      	BRNE _0x2020018
0001c5 d0ac      	RCALL SUBOPT_0x6
0001c6 e3e0      	LDI  R30,LOW(48)
0001c7 93ec      	ST   X,R30
0001c8 c01e      	RJMP _0x2020019
                 _0x2020018:
                 _0x202001A:
0001c9 2fe1      	MOV  R30,R17
0001ca 5011      	SUBI R17,1
0001cb 30e0      	CPI  R30,0
0001cc f0d1      	BREQ _0x202001C
0001cd d0ab      	RCALL SUBOPT_0x7
0001ce d0af      	RCALL SUBOPT_0x8
                +
0001cf e0a0     +LDI R26 , LOW ( 0x3F000000 )
0001d0 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0001d1 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0001d2 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0001d3 d181      	RCALL __ADDF12
0001d4 01df      	MOVW R26,R30
0001d5 01cb      	MOVW R24,R22
0001d6 d061      	RCALL _floor
0001d7 d0ac      	RCALL SUBOPT_0x9
0001d8 d0b0      	RCALL SUBOPT_0xA
0001d9 d219      	RCALL __DIVF21
0001da d107      	RCALL __CFD1U
0001db 2f0e      	MOV  R16,R30
0001dc d095      	RCALL SUBOPT_0x6
0001dd d0ba      	RCALL SUBOPT_0xC
0001de d09a      	RCALL SUBOPT_0x7
0001df d280      	RCALL __CWD1
0001e0 d13a      	RCALL __CDF1
0001e1 d1c3      	RCALL __MULF12
0001e2 d0bb      	RCALL SUBOPT_0xD
0001e3 d29a      	RCALL __SWAPD12
0001e4 d169      	RCALL __SUBF12
0001e5 d087      	RCALL SUBOPT_0x5
0001e6 cfe2      	RJMP _0x202001A
                 _0x202001C:
                 _0x2020019:
0001e7 85e8      	LDD  R30,Y+8
0001e8 30e0      	CPI  R30,0
0001e9 f0b9      	BREQ _0x20C0002
0001ea d087      	RCALL SUBOPT_0x6
0001eb e2ee      	LDI  R30,LOW(46)
0001ec 93ec      	ST   X,R30
                 _0x202001E:
0001ed 85e8      	LDD  R30,Y+8
0001ee 50e1      	SUBI R30,LOW(1)
0001ef 87e8      	STD  Y+8,R30
0001f0 5fef      	SUBI R30,-LOW(1)
0001f1 f079      	BREQ _0x2020020
0001f2 d0ab      	RCALL SUBOPT_0xD
0001f3 d09e      	RCALL SUBOPT_0xB
0001f4 d078      	RCALL SUBOPT_0x5
0001f5 d072      	RCALL SUBOPT_0x4
0001f6 d0eb      	RCALL __CFD1U
0001f7 2f0e      	MOV  R16,R30
0001f8 d079      	RCALL SUBOPT_0x6
0001f9 d09e      	RCALL SUBOPT_0xC
0001fa d0a3      	RCALL SUBOPT_0xD
0001fb d264      	RCALL __CWD1
0001fc d11e      	RCALL __CDF1
0001fd d280      	RCALL __SWAPD12
0001fe d14f      	RCALL __SUBF12
0001ff d06d      	RCALL SUBOPT_0x5
000200 cfec      	RJMP _0x202001E
                 _0x2020020:
                 _0x20C0002:
000201 81ae      	LDD  R26,Y+6
000202 81bf      	LDD  R27,Y+6+1
000203 e0e0      	LDI  R30,LOW(0)
000204 93ec      	ST   X,R30
                 _0x20C0003:
000205 d288      	RCALL __LOADLOCR2
000206 962d      	ADIW R28,13
000207 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000208 d270      	RCALL __PUTPARD2
000209 817b         ldd  r23,y+3
00020a 816a         ldd  r22,y+2
00020b 81f9         ldd  r31,y+1
00020c 81e8         ld   r30,y
00020d fb77         bst  r23,7
00020e 0f77         lsl  r23
00020f fd67         sbrc r22,7
000210 6071         sbr  r23,1
000211 2f97         mov  r25,r23
000212 579e         subi r25,0x7e
000213 f081         breq __ftrunc0
000214 f078         brcs __ftrunc0
000215 3198         cpi  r25,24
000216 f490         brsh __ftrunc1
000217 27aa         clr  r26
000218 27bb         clr  r27
000219 2788         clr  r24
                 __ftrunc2:
00021a 9408         sec
00021b 9587         ror  r24
00021c 95b7         ror  r27
00021d 95a7         ror  r26
00021e 959a         dec  r25
00021f f7d1         brne __ftrunc2
000220 23ea         and  r30,r26
000221 23fb         and  r31,r27
000222 2368         and  r22,r24
000223 c005         rjmp __ftrunc1
                 __ftrunc0:
000224 94e8         clt
000225 2777         clr  r23
000226 27ee         clr  r30
000227 27ff         clr  r31
000228 2766         clr  r22
                 __ftrunc1:
000229 776f         cbr  r22,0x80
00022a 9576         lsr  r23
00022b f408         brcc __ftrunc3
00022c 6860         sbr  r22,0x80
                 __ftrunc3:
00022d f977         bld  r23,7
00022e 91a9         ld   r26,y+
00022f 91b9         ld   r27,y+
000230 9189         ld   r24,y+
000231 9199         ld   r25,y+
000232 17ea         cp   r30,r26
000233 07fb         cpc  r31,r27
000234 0768         cpc  r22,r24
000235 0779         cpc  r23,r25
000236 fb97         bst  r25,7
000237 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000238 d240      	RCALL __PUTPARD2
000239 d230      	RCALL __GETD2S0
00023a dfcd      	RCALL _ftrunc
00023b d233      	RCALL __PUTD1S0
00023c f411          brne __floor1
                 __floor0:
00023d d065      	RCALL SUBOPT_0xE
00023e c007      	RJMP _0x20C0001
                 __floor1:
00023f f7ee          brtc __floor0
000240 d062      	RCALL SUBOPT_0xE
                +
000241 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000242 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000243 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000244 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000245 d108      	RCALL __SUBF12
                 _0x20C0001:
000246 9624      	ADIW R28,4
000247 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
000248 93ba      	ST   -Y,R27
000249 93aa      	ST   -Y,R26
00024a 91e9          ld   r30,y+
00024b 91f9          ld   r31,y+
00024c 91a9          ld   r26,y+
00024d 91b9          ld   r27,y+
00024e 01cd          movw r24,r26
                 strcpyf0:
00024f 9005      	lpm  r0,z+
000250 920d          st   x+,r0
000251 2000          tst  r0
000252 f7e1          brne strcpyf0
000253 01fc          movw r30,r24
000254 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _distance:
000178           	.BYTE 0x4
                 _str:
00017c           	.BYTE 0xA
                 __base_y_G100:
000186           	.BYTE 0x4
                 __seed_G101:
00018a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
                +
000255 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000256 958a     +DEC R24
000257 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000258 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000259 deab      	RCALL __lcd_write_data
00025a e0a3      	LDI  R26,LOW(3)
00025b e0b0      	LDI  R27,0
00025c c048      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
00025d e3a0      	LDI  R26,LOW(48)
00025e de98      	RCALL __lcd_write_nibble_G100
                +
00025f e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000260 958a     +DEC R24
000261 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000262 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000263 81ee      	LDD  R30,Y+6
000264 81ff      	LDD  R31,Y+6+1
000265 93fa      	ST   -Y,R31
000266 93ea      	ST   -Y,R30
000267 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
                +
000268 85e9     +LDD R30 , Y + 9
000269 85fa     +LDD R31 , Y + 9 + 1
00026a 856b     +LDD R22 , Y + 9 + 2
00026b 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
00026c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5:
                +
00026d 87e9     +STD Y + 9 , R30
00026e 87fa     +STD Y + 9 + 1 , R31
00026f 876b     +STD Y + 9 + 2 , R22
000270 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000271 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x6:
000272 81ae      	LDD  R26,Y+6
000273 81bf      	LDD  R27,Y+6+1
000274 9611      	ADIW R26,1
000275 83ae      	STD  Y+6,R26
000276 83bf      	STD  Y+6+1,R27
000277 9711      	SBIW R26,1
000278 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
                +
000279 81aa     +LDD R26 , Y + 2
00027a 81bb     +LDD R27 , Y + 2 + 1
00027b 818c     +LDD R24 , Y + 2 + 2
00027c 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00027d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
                +
00027e eced     +LDI R30 , LOW ( 0x3DCCCCCD )
00027f ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000280 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000281 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000282 d122      	RCALL __MULF12
000283 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
                +
000284 83ea     +STD Y + 2 , R30
000285 83fb     +STD Y + 2 + 1 , R31
000286 836c     +STD Y + 2 + 2 , R22
000287 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000288 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xA:
                +
000289 81ea     +LDD R30 , Y + 2
00028a 81fb     +LDD R31 , Y + 2 + 1
00028b 816c     +LDD R22 , Y + 2 + 2
00028c 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
00028d 85a9     +LDD R26 , Y + 9
00028e 85ba     +LDD R27 , Y + 9 + 1
00028f 858b     +LDD R24 , Y + 9 + 2
000290 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000291 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
                +
000292 e0e0     +LDI R30 , LOW ( 0x41200000 )
000293 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000294 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000295 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000296 d10e      	RCALL __MULF12
000297 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
000298 2fe0      	MOV  R30,R16
000299 5de0      	SUBI R30,-LOW(48)
00029a 93ec      	ST   X,R30
00029b 2fe0      	MOV  R30,R16
00029c e0f0      	LDI  R31,0
00029d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
                +
00029e 85a9     +LDD R26 , Y + 9
00029f 85ba     +LDD R27 , Y + 9 + 1
0002a0 858b     +LDD R24 , Y + 9 + 2
0002a1 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0002a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0002a3 d1c1      	RCALL __GETD1S0
0002a4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002a5 9610      	adiw r26,0
0002a6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002a7 ef8a     +LDI R24 , LOW ( 0xFA )
0002a8 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0002a9 9701     +SBIW R24 , 1
0002aa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0002ab 95a8      	wdr
0002ac 9711      	sbiw r26,1
0002ad f7c9      	brne __delay_ms0
                 __delay_ms1:
0002ae 9508      	ret
                 
                 __ANEGF1:
0002af 9730      	SBIW R30,0
0002b0 4060      	SBCI R22,0
0002b1 4070      	SBCI R23,0
0002b2 f009      	BREQ __ANEGF10
0002b3 5870      	SUBI R23,0x80
                 __ANEGF10:
0002b4 9508      	RET
                 
                 __ROUND_REPACK:
0002b5 2355      	TST  R21
0002b6 f442      	BRPL __REPACK
0002b7 3850      	CPI  R21,0x80
0002b8 f411      	BRNE __ROUND_REPACK0
0002b9 ffe0      	SBRS R30,0
0002ba c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002bb 9631      	ADIW R30,1
0002bc 1f69      	ADC  R22,R25
0002bd 1f79      	ADC  R23,R25
0002be f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002bf e850      	LDI  R21,0x80
0002c0 2757      	EOR  R21,R23
0002c1 f411      	BRNE __REPACK0
0002c2 935f      	PUSH R21
0002c3 c0cf      	RJMP __ZERORES
                 __REPACK0:
0002c4 3f5f      	CPI  R21,0xFF
0002c5 f031      	BREQ __REPACK1
0002c6 0f66      	LSL  R22
0002c7 0c00      	LSL  R0
0002c8 9557      	ROR  R21
0002c9 9567      	ROR  R22
0002ca 2f75      	MOV  R23,R21
0002cb 9508      	RET
                 __REPACK1:
0002cc 935f      	PUSH R21
0002cd 2000      	TST  R0
0002ce f00a      	BRMI __REPACK2
0002cf c0cf      	RJMP __MAXRES
                 __REPACK2:
0002d0 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0002d1 e850      	LDI  R21,0x80
0002d2 2e19      	MOV  R1,R25
0002d3 2215      	AND  R1,R21
0002d4 0f88      	LSL  R24
0002d5 1f99      	ROL  R25
0002d6 2795      	EOR  R25,R21
0002d7 0f55      	LSL  R21
0002d8 9587      	ROR  R24
                 
                 __UNPACK1:
0002d9 e850      	LDI  R21,0x80
0002da 2e07      	MOV  R0,R23
0002db 2205      	AND  R0,R21
0002dc 0f66      	LSL  R22
0002dd 1f77      	ROL  R23
0002de 2775      	EOR  R23,R21
0002df 0f55      	LSL  R21
0002e0 9567      	ROR  R22
0002e1 9508      	RET
                 
                 __CFD1U:
0002e2 9468      	SET
0002e3 c001      	RJMP __CFD1U0
                 __CFD1:
0002e4 94e8      	CLT
                 __CFD1U0:
0002e5 935f      	PUSH R21
0002e6 dff2      	RCALL __UNPACK1
0002e7 3870      	CPI  R23,0x80
0002e8 f018      	BRLO __CFD10
0002e9 3f7f      	CPI  R23,0xFF
0002ea f408      	BRCC __CFD10
0002eb c0a7      	RJMP __ZERORES
                 __CFD10:
0002ec e156      	LDI  R21,22
0002ed 1b57      	SUB  R21,R23
0002ee f4aa      	BRPL __CFD11
0002ef 9551      	NEG  R21
0002f0 3058      	CPI  R21,8
0002f1 f40e      	BRTC __CFD19
0002f2 3059      	CPI  R21,9
                 __CFD19:
0002f3 f030      	BRLO __CFD17
0002f4 efef      	SER  R30
0002f5 efff      	SER  R31
0002f6 ef6f      	SER  R22
0002f7 e77f      	LDI  R23,0x7F
0002f8 f977      	BLD  R23,7
0002f9 c01a      	RJMP __CFD15
                 __CFD17:
0002fa 2777      	CLR  R23
0002fb 2355      	TST  R21
0002fc f0b9      	BREQ __CFD15
                 __CFD18:
0002fd 0fee      	LSL  R30
0002fe 1fff      	ROL  R31
0002ff 1f66      	ROL  R22
000300 1f77      	ROL  R23
000301 955a      	DEC  R21
000302 f7d1      	BRNE __CFD18
000303 c010      	RJMP __CFD15
                 __CFD11:
000304 2777      	CLR  R23
                 __CFD12:
000305 3058      	CPI  R21,8
000306 f028      	BRLO __CFD13
000307 2fef      	MOV  R30,R31
000308 2ff6      	MOV  R31,R22
000309 2f67      	MOV  R22,R23
00030a 5058      	SUBI R21,8
00030b cff9      	RJMP __CFD12
                 __CFD13:
00030c 2355      	TST  R21
00030d f031      	BREQ __CFD15
                 __CFD14:
00030e 9576      	LSR  R23
00030f 9567      	ROR  R22
000310 95f7      	ROR  R31
000311 95e7      	ROR  R30
000312 955a      	DEC  R21
000313 f7d1      	BRNE __CFD14
                 __CFD15:
000314 2000      	TST  R0
000315 f40a      	BRPL __CFD16
000316 d141      	RCALL __ANEGD1
                 __CFD16:
000317 915f      	POP  R21
000318 9508      	RET
                 
                 __CDF1U:
000319 9468      	SET
00031a c001      	RJMP __CDF1U0
                 __CDF1:
00031b 94e8      	CLT
                 __CDF1U0:
00031c 9730      	SBIW R30,0
00031d 4060      	SBCI R22,0
00031e 4070      	SBCI R23,0
00031f f0b1      	BREQ __CDF10
000320 2400      	CLR  R0
000321 f026      	BRTS __CDF11
000322 2377      	TST  R23
000323 f412      	BRPL __CDF11
000324 9400      	COM  R0
000325 d132      	RCALL __ANEGD1
                 __CDF11:
000326 2e17      	MOV  R1,R23
000327 e17e      	LDI  R23,30
000328 2011      	TST  R1
                 __CDF12:
000329 f032      	BRMI __CDF13
00032a 957a      	DEC  R23
00032b 0fee      	LSL  R30
00032c 1fff      	ROL  R31
00032d 1f66      	ROL  R22
00032e 1c11      	ROL  R1
00032f cff9      	RJMP __CDF12
                 __CDF13:
000330 2fef      	MOV  R30,R31
000331 2ff6      	MOV  R31,R22
000332 2d61      	MOV  R22,R1
000333 935f      	PUSH R21
000334 df8a      	RCALL __REPACK
000335 915f      	POP  R21
                 __CDF10:
000336 9508      	RET
                 
                 __SWAPACC:
000337 934f      	PUSH R20
000338 01af      	MOVW R20,R30
000339 01fd      	MOVW R30,R26
00033a 01da      	MOVW R26,R20
00033b 01ab      	MOVW R20,R22
00033c 01bc      	MOVW R22,R24
00033d 01ca      	MOVW R24,R20
00033e 2d40      	MOV  R20,R0
00033f 2c01      	MOV  R0,R1
000340 2e14      	MOV  R1,R20
000341 914f      	POP  R20
000342 9508      	RET
                 
                 __UADD12:
000343 0fea      	ADD  R30,R26
000344 1ffb      	ADC  R31,R27
000345 1f68      	ADC  R22,R24
000346 9508      	RET
                 
                 __NEGMAN1:
000347 95e0      	COM  R30
000348 95f0      	COM  R31
000349 9560      	COM  R22
00034a 5fef      	SUBI R30,-1
00034b 4fff      	SBCI R31,-1
00034c 4f6f      	SBCI R22,-1
00034d 9508      	RET
                 
                 __SUBF12:
00034e 935f      	PUSH R21
00034f df81      	RCALL __UNPACK
000350 3890      	CPI  R25,0x80
000351 f171      	BREQ __ADDF129
000352 e850      	LDI  R21,0x80
000353 2615      	EOR  R1,R21
                 
000354 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000355 935f      	PUSH R21
000356 df7a      	RCALL __UNPACK
000357 3890      	CPI  R25,0x80
000358 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000359 3870      	CPI  R23,0x80
00035a f121      	BREQ __ADDF128
                 __ADDF121:
00035b 2f57      	MOV  R21,R23
00035c 1b59      	SUB  R21,R25
00035d f12b      	BRVS __ADDF1211
00035e f412      	BRPL __ADDF122
00035f dfd7      	RCALL __SWAPACC
000360 cffa      	RJMP __ADDF121
                 __ADDF122:
000361 3158      	CPI  R21,24
000362 f018      	BRLO __ADDF123
000363 27aa      	CLR  R26
000364 27bb      	CLR  R27
000365 2788      	CLR  R24
                 __ADDF123:
000366 3058      	CPI  R21,8
000367 f028      	BRLO __ADDF124
000368 2fab      	MOV  R26,R27
000369 2fb8      	MOV  R27,R24
00036a 2788      	CLR  R24
00036b 5058      	SUBI R21,8
00036c cff9      	RJMP __ADDF123
                 __ADDF124:
00036d 2355      	TST  R21
00036e f029      	BREQ __ADDF126
                 __ADDF125:
00036f 9586      	LSR  R24
000370 95b7      	ROR  R27
000371 95a7      	ROR  R26
000372 955a      	DEC  R21
000373 f7d9      	BRNE __ADDF125
                 __ADDF126:
000374 2d50      	MOV  R21,R0
000375 2551      	EOR  R21,R1
000376 f072      	BRMI __ADDF127
000377 dfcb      	RCALL __UADD12
000378 f438      	BRCC __ADDF129
000379 9567      	ROR  R22
00037a 95f7      	ROR  R31
00037b 95e7      	ROR  R30
00037c 9573      	INC  R23
00037d f413      	BRVC __ADDF129
00037e c020      	RJMP __MAXRES
                 __ADDF128:
00037f dfb7      	RCALL __SWAPACC
                 __ADDF129:
000380 df3e      	RCALL __REPACK
000381 915f      	POP  R21
000382 9508      	RET
                 __ADDF1211:
000383 f7d8      	BRCC __ADDF128
000384 cffb      	RJMP __ADDF129
                 __ADDF127:
000385 1bea      	SUB  R30,R26
000386 0bfb      	SBC  R31,R27
000387 0b68      	SBC  R22,R24
000388 f051      	BREQ __ZERORES
000389 f410      	BRCC __ADDF1210
00038a 9400      	COM  R0
00038b dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00038c 2366      	TST  R22
00038d f392      	BRMI __ADDF129
00038e 0fee      	LSL  R30
00038f 1fff      	ROL  R31
000390 1f66      	ROL  R22
000391 957a      	DEC  R23
000392 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000393 27ee      	CLR  R30
000394 27ff      	CLR  R31
000395 2766      	CLR  R22
000396 2777      	CLR  R23
000397 915f      	POP  R21
000398 9508      	RET
                 
                 __MINRES:
000399 efef      	SER  R30
00039a efff      	SER  R31
00039b e76f      	LDI  R22,0x7F
00039c ef7f      	SER  R23
00039d 915f      	POP  R21
00039e 9508      	RET
                 
                 __MAXRES:
00039f efef      	SER  R30
0003a0 efff      	SER  R31
0003a1 e76f      	LDI  R22,0x7F
0003a2 e77f      	LDI  R23,0x7F
0003a3 915f      	POP  R21
0003a4 9508      	RET
                 
                 __MULF12:
0003a5 935f      	PUSH R21
0003a6 df2a      	RCALL __UNPACK
0003a7 3870      	CPI  R23,0x80
0003a8 f351      	BREQ __ZERORES
0003a9 3890      	CPI  R25,0x80
0003aa f341      	BREQ __ZERORES
0003ab 2401      	EOR  R0,R1
0003ac 9408      	SEC
0003ad 1f79      	ADC  R23,R25
0003ae f423      	BRVC __MULF124
0003af f31c      	BRLT __ZERORES
                 __MULF125:
0003b0 2000      	TST  R0
0003b1 f33a      	BRMI __MINRES
0003b2 cfec      	RJMP __MAXRES
                 __MULF124:
0003b3 920f      	PUSH R0
0003b4 931f      	PUSH R17
0003b5 932f      	PUSH R18
0003b6 933f      	PUSH R19
0003b7 934f      	PUSH R20
0003b8 2711      	CLR  R17
0003b9 2722      	CLR  R18
0003ba 2799      	CLR  R25
0003bb 9f68      	MUL  R22,R24
0003bc 01a0      	MOVW R20,R0
0003bd 9f8f      	MUL  R24,R31
0003be 2d30      	MOV  R19,R0
0003bf 0d41      	ADD  R20,R1
0003c0 1f59      	ADC  R21,R25
0003c1 9f6b      	MUL  R22,R27
0003c2 0d30      	ADD  R19,R0
0003c3 1d41      	ADC  R20,R1
0003c4 1f59      	ADC  R21,R25
0003c5 9f8e      	MUL  R24,R30
0003c6 d027      	RCALL __MULF126
0003c7 9fbf      	MUL  R27,R31
0003c8 d025      	RCALL __MULF126
0003c9 9f6a      	MUL  R22,R26
0003ca d023      	RCALL __MULF126
0003cb 9fbe      	MUL  R27,R30
0003cc d01d      	RCALL __MULF127
0003cd 9faf      	MUL  R26,R31
0003ce d01b      	RCALL __MULF127
0003cf 9fae      	MUL  R26,R30
0003d0 0d11      	ADD  R17,R1
0003d1 1f29      	ADC  R18,R25
0003d2 1f39      	ADC  R19,R25
0003d3 1f49      	ADC  R20,R25
0003d4 1f59      	ADC  R21,R25
0003d5 2fe3      	MOV  R30,R19
0003d6 2ff4      	MOV  R31,R20
0003d7 2f65      	MOV  R22,R21
0003d8 2f52      	MOV  R21,R18
0003d9 914f      	POP  R20
0003da 913f      	POP  R19
0003db 912f      	POP  R18
0003dc 911f      	POP  R17
0003dd 900f      	POP  R0
0003de 2366      	TST  R22
0003df f02a      	BRMI __MULF122
0003e0 0f55      	LSL  R21
0003e1 1fee      	ROL  R30
0003e2 1fff      	ROL  R31
0003e3 1f66      	ROL  R22
0003e4 c002      	RJMP __MULF123
                 __MULF122:
0003e5 9573      	INC  R23
0003e6 f24b      	BRVS __MULF125
                 __MULF123:
0003e7 decd      	RCALL __ROUND_REPACK
0003e8 915f      	POP  R21
0003e9 9508      	RET
                 
                 __MULF127:
0003ea 0d10      	ADD  R17,R0
0003eb 1d21      	ADC  R18,R1
0003ec 1f39      	ADC  R19,R25
0003ed c002      	RJMP __MULF128
                 __MULF126:
0003ee 0d20      	ADD  R18,R0
0003ef 1d31      	ADC  R19,R1
                 __MULF128:
0003f0 1f49      	ADC  R20,R25
0003f1 1f59      	ADC  R21,R25
0003f2 9508      	RET
                 
                 __DIVF21:
0003f3 935f      	PUSH R21
0003f4 dedc      	RCALL __UNPACK
0003f5 3870      	CPI  R23,0x80
0003f6 f421      	BRNE __DIVF210
0003f7 2011      	TST  R1
                 __DIVF211:
0003f8 f40a      	BRPL __DIVF219
0003f9 cf9f      	RJMP __MINRES
                 __DIVF219:
0003fa cfa4      	RJMP __MAXRES
                 __DIVF210:
0003fb 3890      	CPI  R25,0x80
0003fc f409      	BRNE __DIVF218
                 __DIVF217:
0003fd cf95      	RJMP __ZERORES
                 __DIVF218:
0003fe 2401      	EOR  R0,R1
0003ff 9408      	SEC
000400 0b97      	SBC  R25,R23
000401 f41b      	BRVC __DIVF216
000402 f3d4      	BRLT __DIVF217
000403 2000      	TST  R0
000404 cff3      	RJMP __DIVF211
                 __DIVF216:
000405 2f79      	MOV  R23,R25
000406 931f      	PUSH R17
000407 932f      	PUSH R18
000408 933f      	PUSH R19
000409 934f      	PUSH R20
00040a 2411      	CLR  R1
00040b 2711      	CLR  R17
00040c 2722      	CLR  R18
00040d 2733      	CLR  R19
00040e 2744      	CLR  R20
00040f 2755      	CLR  R21
000410 e290      	LDI  R25,32
                 __DIVF212:
000411 17ae      	CP   R26,R30
000412 07bf      	CPC  R27,R31
000413 0786      	CPC  R24,R22
000414 0741      	CPC  R20,R17
000415 f030      	BRLO __DIVF213
000416 1bae      	SUB  R26,R30
000417 0bbf      	SBC  R27,R31
000418 0b86      	SBC  R24,R22
000419 0b41      	SBC  R20,R17
00041a 9408      	SEC
00041b c001      	RJMP __DIVF214
                 __DIVF213:
00041c 9488      	CLC
                 __DIVF214:
00041d 1f55      	ROL  R21
00041e 1f22      	ROL  R18
00041f 1f33      	ROL  R19
000420 1c11      	ROL  R1
000421 1faa      	ROL  R26
000422 1fbb      	ROL  R27
000423 1f88      	ROL  R24
000424 1f44      	ROL  R20
000425 959a      	DEC  R25
000426 f751      	BRNE __DIVF212
000427 01f9      	MOVW R30,R18
000428 2d61      	MOV  R22,R1
000429 914f      	POP  R20
00042a 913f      	POP  R19
00042b 912f      	POP  R18
00042c 911f      	POP  R17
00042d 2366      	TST  R22
00042e f032      	BRMI __DIVF215
00042f 0f55      	LSL  R21
000430 1fee      	ROL  R30
000431 1fff      	ROL  R31
000432 1f66      	ROL  R22
000433 957a      	DEC  R23
000434 f243      	BRVS __DIVF217
                 __DIVF215:
000435 de7f      	RCALL __ROUND_REPACK
000436 915f      	POP  R21
000437 9508      	RET
                 
                 __CMPF12:
000438 2399      	TST  R25
000439 f09a      	BRMI __CMPF120
00043a 2377      	TST  R23
00043b f042      	BRMI __CMPF121
00043c 1797      	CP   R25,R23
00043d f048      	BRLO __CMPF122
00043e f429      	BRNE __CMPF121
00043f 17ae      	CP   R26,R30
000440 07bf      	CPC  R27,R31
000441 0786      	CPC  R24,R22
000442 f020      	BRLO __CMPF122
000443 f031      	BREQ __CMPF123
                 __CMPF121:
000444 9498      	CLZ
000445 9488      	CLC
000446 9508      	RET
                 __CMPF122:
000447 9498      	CLZ
000448 9408      	SEC
000449 9508      	RET
                 __CMPF123:
00044a 9418      	SEZ
00044b 9488      	CLC
00044c 9508      	RET
                 __CMPF120:
00044d 2377      	TST  R23
00044e f7c2      	BRPL __CMPF122
00044f 1797      	CP   R25,R23
000450 f398      	BRLO __CMPF121
000451 f7a9      	BRNE __CMPF122
000452 17ea      	CP   R30,R26
000453 07fb      	CPC  R31,R27
000454 0768      	CPC  R22,R24
000455 f388      	BRLO __CMPF122
000456 f399      	BREQ __CMPF123
000457 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
000458 95f0      	COM  R31
000459 9560      	COM  R22
00045a 9570      	COM  R23
00045b 95e1      	NEG  R30
00045c 4fff      	SBCI R31,-1
00045d 4f6f      	SBCI R22,-1
00045e 4f7f      	SBCI R23,-1
00045f 9508      	RET
                 
                 __CWD1:
000460 2f6f      	MOV  R22,R31
000461 0f66      	ADD  R22,R22
000462 0b66      	SBC  R22,R22
000463 2f76      	MOV  R23,R22
000464 9508      	RET
                 
                 __GETD1S0:
000465 81e8      	LD   R30,Y
000466 81f9      	LDD  R31,Y+1
000467 816a      	LDD  R22,Y+2
000468 817b      	LDD  R23,Y+3
000469 9508      	RET
                 
                 __GETD2S0:
00046a 81a8      	LD   R26,Y
00046b 81b9      	LDD  R27,Y+1
00046c 818a      	LDD  R24,Y+2
00046d 819b      	LDD  R25,Y+3
00046e 9508      	RET
                 
                 __PUTD1S0:
00046f 83e8      	ST   Y,R30
000470 83f9      	STD  Y+1,R31
000471 836a      	STD  Y+2,R22
000472 837b      	STD  Y+3,R23
000473 9508      	RET
                 
                 __PUTPARD1:
000474 937a      	ST   -Y,R23
000475 936a      	ST   -Y,R22
000476 93fa      	ST   -Y,R31
000477 93ea      	ST   -Y,R30
000478 9508      	RET
                 
                 __PUTPARD2:
000479 939a      	ST   -Y,R25
00047a 938a      	ST   -Y,R24
00047b 93ba      	ST   -Y,R27
00047c 93aa      	ST   -Y,R26
00047d 9508      	RET
                 
                 __SWAPD12:
00047e 2e18      	MOV  R1,R24
00047f 2f86      	MOV  R24,R22
000480 2d61      	MOV  R22,R1
000481 2e19      	MOV  R1,R25
000482 2f97      	MOV  R25,R23
000483 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000484 2e1b      	MOV  R1,R27
000485 2fbf      	MOV  R27,R31
000486 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000487 2e1a      	MOV  R1,R26
000488 2fae      	MOV  R26,R30
000489 2de1      	MOV  R30,R1
00048a 9508      	RET
                 
                 __SAVELOCR2:
00048b 931a      	ST   -Y,R17
00048c 930a      	ST   -Y,R16
00048d 9508      	RET
                 
                 __LOADLOCR2:
00048e 8119      	LDD  R17,Y+1
00048f 8108      	LD   R16,Y
000490 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  29 r1 :  30 r2 :   0 r3 :   0 r4 :   4 r5 :   1 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:  25 r18:  12 r19:  12 r20:  22 r21:  63 r22:  74 r23:  69 
r24:  56 r25:  49 r26: 101 r27:  55 r28:   7 r29:   1 r30: 176 r31:  65 
x  :  10 y  : 129 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   9 
adiw  :   9 and   :   5 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   1 break :   0 breq  :  24 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   9 brne  :  26 brpl  :   8 brsh  :   2 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 cbi   :   7 
cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 clr   :  33 
cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 cp    :   7 
cpc   :  12 cpi   :  28 cpse  :   0 dec   :  14 des   :   0 eor   :   7 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   4 ld    :  27 ldd   :  50 ldi   : 122 lds   :   8 lpm   :   8 
lsl   :  12 lsr   :   3 mov   :  52 movw  :  17 mul   :   9 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   1 ori   :   1 out   :  18 
pop   :  18 push  :  18 rcall : 129 ret   :  51 reti  :   1 rjmp  :  66 
rol   :  24 ror   :  15 sbc   :   7 sbci  :  10 sbi   :   7 sbic  :   1 
sbis  :   1 sbiw  :   9 sbr   :   2 sbrc  :   1 sbrs  :   1 sec   :   5 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   2 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :  43 std   :  20 
sts   :  10 sub   :   4 subi  :  14 swap  :   1 tst   :  19 wdr   :   1 

Instructions used: 79 out of 114 (69.3%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000922   2242     96   2338    8192  28.5%
[.dseg] 0x000060 0x00018e      0     46     46    1024   4.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
